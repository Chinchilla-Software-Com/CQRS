<#@ Include File="TemplateHeader.t4" #>
<#@ Modeling ElementType="Microsoft.VisualStudio.Uml.Classes.IClass" Processor="ModelingProcessor" ApplyStereotypes="CSharp" #>
<#@ Import Namespace="Microsoft.VisualStudio.ArchitectureTools.Extensibility.Uml" #>
<#@ Import Namespace="Microsoft.VisualStudio.Uml.AuxiliaryConstructs" #>
<#@ import namespace="Microsoft.VisualStudio.Uml.Classes" #>
<#@ Include File="CSharpCommentHelpers.t4" #>
<#@ Include File="CSharpHelpers.t4" #>
<#@ Include File="CqrsTemplateHelpers.t4" #>
<#@ Include File="ModelHelper.t4" #>
<#@ Output Extension=".cs" #>
<#
var stereoTypeProperties = this.Element.AppliedStereotypes.Single(property => property.Name == "Event");
string authenticationTokenType = GetDomainAuthenticationTokenType(this.Element);

// Header
WriteAutoGeneratedWarningHeader();

string classNamespace = GetNamespace(this.Element.Namespace);
string className = ClassifierName(this.Element);
string baseClass = GetBaseClass(this.Element);

// using statements
#>
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
<#
string eventHandlerTechnology = GetEventHandlerTechnology(this.Element);
switch(eventHandlerTechnology)
{
	case "Akka":
		baseClass = "ReceiveActor";
#>using Akka.Actor;
<#
		break;
	default:
		// for now do nothing
		break;
}
#>
using cdmdotnet.AutoMapper;
using Chinchilla.Logging;
using Cqrs.Events;
using Cqrs.Domain;

namespace <#= classNamespace #>.Handlers
{
<#
	// Class and Attributes
	string eventHandlerTechnologyBaseClass = "IEventHandler<" + authenticationTokenType + ", " + className + ">";
	if (!string.IsNullOrWhiteSpace(baseClass))
	{
		baseClass = ": " + baseClass;
		eventHandlerTechnologyBaseClass = ", " + eventHandlerTechnologyBaseClass;
	}
	else
		eventHandlerTechnologyBaseClass = ": " + eventHandlerTechnologyBaseClass;
#>
	<#= GetGeneratedCodeAttribute() #>
	public <#= GetAbstract(this.Element) #> partial class <#= className #>EventHandler
		<#= baseClass #>
		<#= eventHandlerTechnologyBaseClass #>
	{
<#
switch(eventHandlerTechnology)
{
	case "Akka":
		baseClass = "ReceiveActor";
#>
		/// <summary>
		/// Instantiates the <see cref="<#= className #>EventHandler"/> class registering any <see cref="Akka.Actor.ReceiveActor.Receive{T}(System.Func{T,System.Threading.Tasks.Task})"/> required.
		/// </summary>
		public <#= className #>EventHandler()
		{
			Receive<<#= className #>>(@event => Handle(@event));
		}
<#
		break;
	default:
		// for now do nothing
		break;
}
#>

		public <#= className #>EventHandler(ILogger logger, IAutomapHelper automapHelper)
		{
			Logger = logger;
			AutomapHelper = automapHelper;
		}

		protected ILogger Logger { get; private set; }

		protected IAutomapHelper AutomapHelper { get; private set; }

		#region Implementation of IEventHandler<in <#= className #>>

		public void Handle(<#= className #> @event)
		{
			OnHandle(@event);
		}

		#endregion

		partial void OnHandle(<#= className #> @event);
	}
}
<#+
	protected override bool AppliesToElement()
	{
		return ShouldGenerateCodeForElement(this.Element) && this.Element.AppliedStereotypes.Any(property => property.Name == "Event");
	}
#>