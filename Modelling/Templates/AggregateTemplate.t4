<#@ Include File="TemplateHeader.t4" #>
<#@ Modeling ElementType="Microsoft.VisualStudio.Uml.Classes.IClass" Processor="ModelingProcessor" ApplyStereotypes="CSharp" #>
<#@ Import Namespace="Microsoft.VisualStudio.ArchitectureTools.Extensibility.Uml" #>
<#@ Import Namespace="Microsoft.VisualStudio.Uml.AuxiliaryConstructs" #>
<#@ import namespace="Microsoft.VisualStudio.Uml.Classes" #>
<#@ Import Namespace="System.Text" #>
<#@ Include File="CSharpCommentHelpers.t4" #>
<#@ Include File="CSharpHelpers.t4" #>
<#@ Include File="CqrsTemplateHelpers.t4" #>
<#@ Include File="ModelHelper.t4" #>
<#@ Include File="DeeperIntoTheDecisionTree.t4" #>
<#@ Output Extension=".cs" #>

<#
var stereoTypeProperties = this.Element.AppliedStereotypes.Single(property => property.Name == "AggregateRoot");
string authenticationTokenType = GetDomainAuthenticationTokenType(this.Element);

// Header
WriteAutoGeneratedWarningHeader();

string classNamespace = GetNamespace(this.Element.Namespace);
string className = ClassifierName(this.Element);
string baseClass = GetBaseClass(this.Element);
bool isSnapshotable = stereoTypeProperties.PropertyInstances
	.Single(property => property.Name == "IsSnapshotable")
	.Value == "true";
string aggregateTechnology = GetAggregateTechnology(this.Element);
if (string.IsNullOrWhiteSpace(baseClass) && isSnapshotable)
	baseClass = string.Format("{1}SnapshotAggregateRoot<" + authenticationTokenType + ", {0}.{0}Snapshot>", className, aggregateTechnology == "Akka" ? "Akka" : string.Empty);

// using statements
WriteUsingStatements(this.Element);
switch(aggregateTechnology)
{
	case "Akka":
		if (string.IsNullOrWhiteSpace(baseClass))
			baseClass = "AkkaAggregateRoot<" + authenticationTokenType + ">";
#>using Akka.Actor;
using Cqrs.Akka.Domain;
using Cqrs.Akka.Snapshots;
<#
		break;
	default:
		if (string.IsNullOrWhiteSpace(baseClass))
			baseClass = "AggregateRoot<" + authenticationTokenType + ">";
		break;
}
#>
using Cqrs.Configuration;
using Chinchilla.Logging;
using Cqrs.Snapshots;
using Cqrs.Authentication;
using Cqrs.Domain;
using <#= classNamespace #>.Events;
using <#= classNamespace #>.Commands;

namespace <#= classNamespace #>
{
<#
IEnumerable<IAssociation> relationships = this.Element.GetRelatedLinks<IAssociation>().Where(associationEnd => !string.IsNullOrWhiteSpace(associationEnd.Name) && associationEnd.TargetElement == this.Element);

// Class and Attributes
#>
<# PushIndent("\t"); WriteSummaryComment(this.Element.Description); ClearIndent(); #>
	<#= GetGeneratedCodeAttribute() #>
	public <#= GetAbstract(this.Element) #> partial class <#= className #> : <#= baseClass #>
	{
		public Guid Rsn
		{
			get { return Id; }
			private set { Id = value; }
		}

		public bool IsDeleted {get; set;}

		protected IDependencyResolver DependencyResolver { get; private set; }
<#
	if (aggregateTechnology != "Akka")
	{
#>

		protected ILogger Logger { get; private set; }
<#
	}
#>
<#
		IList<IProperty> collectionProperties = GetPropertyList(this.Element);
		// Properties
		foreach(var collectionProperty in collectionProperties)
		{
			if (collectionProperty.OwningAssociation != null)
			{
				var commandHandler = collectionProperty.OwningAssociation.AppliedStereotypes.SingleOrDefault(property => property.Name == "CommandHandler");
				// If this is a command handler association, don't add a property for it as it's a command handler definition
				if (commandHandler != null)
					continue;
				var eventLink = collectionProperty.OwningAssociation.TargetElement.AppliedStereotypes.SingleOrDefault(property => property.Name == "Event");
				// If this is an event association, don't add a property for it as it's an event definition
				if (eventLink != null)
					continue;
			}
#>

<# PushIndent("\t\t"); WriteSummaryComment(collectionProperty.Description); ClearIndent(); #>
		<#= GetPropertyVisibility(collectionProperty) #> <#= GetFullDisplayType(collectionProperty) #> <#= collectionProperty.Name #> { get; private set; }
<#
		}
#>

// ReSharper disable UnusedMember.Local
		/// <summary>
		/// A constructor for the <see cref="Cqrs.Domain.Factories.IAggregateFactory"/>
		/// </summary>
		private <#= className #>()
<#
switch(aggregateTechnology)
{
	case "Akka":
#>
			: base(null, null, null, null, null)
<#
		break;
	default:
		// for now do nothing
		break;
}
#>
		{
<#
			foreach(IProperty collectionProperty in collectionProperties.Where(property => property.UpperValue != null && property.UpperValue.ToString() == "*").ToList())
			{
				if (collectionProperty.OwningAssociation != null)
				{
					var commandHandler = collectionProperty.OwningAssociation.AppliedStereotypes.SingleOrDefault(property => property.Name == "CommandHandler");
					// If this is a command handler association, don't add a property for it as it's a command handler definition
					if (commandHandler != null)
						continue;
					var eventLink = collectionProperty.OwningAssociation.TargetElement.AppliedStereotypes.SingleOrDefault(property => property.Name == "Event");
					// If this is an event association, don't add a property for it as it's an event definition
					if (eventLink != null)
						continue;
				}
#>
			<#= collectionProperty.Name #> = new List<<#= GetDisplayType(collectionProperty) #>>();
<#
			}
#>

<#
IList<IOperation> collectionMethods = GetMethodList(this.Element);
switch(aggregateTechnology)
{
	case "Akka":
#>
			// Methods
<#
		// Methods
		foreach(IOperation collectionMethod in collectionMethods)
		{
#>
			Receive<<#= collectionMethod.Name #>Command>(command => Execute(<#= collectionMethod.Name #>, command));
<#
		}

#>
			// Relationships
<#
		// Relationships
		foreach(IAssociation relationship in relationships)
		{
			string relationshipName = relationship.Name;
			if (string.IsNullOrWhiteSpace(relationshipName))
				relationshipName = ((INamedElement)relationship.SourceElement).Name;
			string targetElementName = ((INamedElement)relationship.TargetElement).Name;
			IList<IProperty> relationshipProperties = GetPropertyList((IClass)relationship.SourceElement).Where(property=> property.Type != relationship.TargetElement && property.Type != relationship.SourceElement).ToList();
			IEnumerable<IAssociation> eventRelationships = this.Element.GetRelatedLinks<IAssociation>().Where(associationEnd => associationEnd.Name == relationship.Name && associationEnd.SourceElement == this.Element);
			string commandName = string.Format("{0}Command", ((INamedElement)relationship.SourceElement).Name);

			var commandHandler = relationship.AppliedStereotypes.SingleOrDefault(property => property.Name == "CommandHandler");
			if (commandHandler != null)
			{
				string aggregateRootMethod = commandHandler.PropertyInstances.Single(property => property.Name == "AggregateRootMethod").Value;
				if (!string.IsNullOrWhiteSpace(aggregateRootMethod))
					relationshipName = aggregateRootMethod;
			}
#>
			Receive<<#= commandName #>>(command => Execute(<#= relationshipName #>, command));
<#
		}
		break;
	default:
		// for now do nothing
		break;
}
#>
		}

		/// <summary>
		/// A constructor for the <see cref="Cqrs.Domain.Factories.IAggregateFactory"/>
		/// </summary>
		private <#= className #>(IDependencyResolver dependencyResolver, ILogger logger)
<#
switch(aggregateTechnology)
{
	case "Akka":
#>
			: this()
<#
		break;
	default:
		// for now do nothing
		break;
}
#>
		{
			DependencyResolver = dependencyResolver;
			Logger = logger;
<#
	if (aggregateTechnology == "Akka")
	{
#>
			UnitOfWork = DependencyResolver.Resolve<IUnitOfWork<<#= authenticationTokenType #>>>();
			Repository = DependencyResolver.Resolve<IAkka<#= isSnapshotable ? "Snapshot" : "" #>AggregateRepository<<#= authenticationTokenType #>>>();
			CorrelationIdHelper = DependencyResolver.Resolve<ICorrelationIdHelper>();
			AuthenticationTokenHelper = DependencyResolver.Resolve<IAuthenticationTokenHelper<<#= authenticationTokenType #>>>();

<#
	}
#>
<#
			foreach(IProperty collectionProperty in collectionProperties.Where(property => property.UpperValue != null && property.UpperValue.ToString() == "*").ToList())
			{
				if (collectionProperty.OwningAssociation != null)
				{
					var commandHandler = collectionProperty.OwningAssociation.AppliedStereotypes.SingleOrDefault(property => property.Name == "CommandHandler");
					// If this is a command handler association, don't add a property for it as it's a command handler definition
					if (commandHandler != null)
						continue;
					var eventLink = collectionProperty.OwningAssociation.TargetElement.AppliedStereotypes.SingleOrDefault(property => property.Name == "Event");
					// If this is an event association, don't add a property for it as it's an event definition
					if (eventLink != null)
						continue;
				}
#>
			<#= collectionProperty.Name #> = new List<<#= GetDisplayType(collectionProperty) #>>();
<#
			}
#>
		}
// ReSharper restore UnusedMember.Local

		public <#= className #>(IDependencyResolver dependencyResolver, ILogger logger, Guid rsn)
			: this(dependencyResolver, logger)
		{
			Rsn = rsn;
<#
			foreach(IProperty collectionProperty in collectionProperties.Where(property => property.UpperValue != null && property.UpperValue.ToString() == "*").ToList())
			{
				if (collectionProperty.OwningAssociation != null)
				{
					var commandHandler = collectionProperty.OwningAssociation.AppliedStereotypes.SingleOrDefault(property => property.Name == "CommandHandler");
					// If this is a command handler association, don't add a property for it as it's a command handler definition
					if (commandHandler != null)
						continue;
					var eventLink = collectionProperty.OwningAssociation.TargetElement.AppliedStereotypes.SingleOrDefault(property => property.Name == "Event");
					// If this is an event association, don't add a property for it as it's an event definition
					if (eventLink != null)
						continue;
				}
#>
			<#= collectionProperty.Name #> = new List<<#= GetDisplayType(collectionProperty) #>>();
<#
			}
#>
		}
<#
		// Methods
		foreach(IOperation collectionMethod in collectionMethods)
		{
			bool autoGenerated = collectionMethod
				.AppliedStereotypes.Any(property => property.Name == "AutoGenerated");
			if (autoGenerated)
				continue;

			bool isSimple = false;
			string eventName = null;
			var methodStereoTypeProperties = collectionMethod.AppliedStereotypes.SingleOrDefault(property => property.Name == "AggregateRootMethod");
			if (methodStereoTypeProperties != null)
			{
				isSimple = methodStereoTypeProperties.PropertyInstances.Any(property => property.Name == "AggregateRootMethodType" && property.Value == "Simple");
				if (isSimple)
					eventName = methodStereoTypeProperties.PropertyInstances.Single(property => property.Name == "EventName").Value;
			}
#>
<#
			if (aggregateTechnology == "Akka")
			{
#>
		public virtual void <#= collectionMethod.Name #>(<#= collectionMethod.Name #>Command command)
		{
			<#= collectionMethod.Name #>(<#
				var parameters = collectionMethod.OwnedParameters.Where(p => p.Direction != ParameterDirectionKind.Return).ToList();
				var methodBody = new System.Text.StringBuilder();
				int akkaIndex = 0;
				foreach (IParameter collectionProperty in parameters)
				{
					if (akkaIndex > 0)
						methodBody.Append(", ");
					akkaIndex++;
					methodBody.Append("command.");
					methodBody.Append(collectionProperty.Name);
				}
#><#= methodBody.ToString() #>);
		}
<#
			}
#>

		public virtual void <#= collectionMethod.Name #>(<#= GetMethodParameterList(collectionMethod) #>)
		{
			Logger.LogDebug("Entered", "<#= className #>/<#= collectionMethod.Name #>");
<#
			if (isSimple && !string.IsNullOrWhiteSpace(eventName))
			{
				string applyEventParameters = GetMethodParameterNameList(collectionMethod);
				if (!string.IsNullOrWhiteSpace(applyEventParameters))
					applyEventParameters = string.Format(", {0}", applyEventParameters);
#>
			Logger.LogDebug("Applying event", "<#= className #>/<#= collectionMethod.Name #>/<#= eventName #>");
			ApplyChange(new <#= eventName #>(Rsn<#= applyEventParameters #>));
<#
			}
			else
			{
#>
			On<#= collectionMethod.Name #>(<#= GetMethodParameterNameList(collectionMethod) #>);
<#
			}
#>
			Logger.LogDebug("Exited", "<#= className #>/<#= collectionMethod.Name #>");
		}
<#
			if (isSimple && !string.IsNullOrWhiteSpace(eventName))
			{
#>
		private void Apply(<#= eventName #> @event)
		{
			OnApply(@event);
		}
		partial void OnApply(<#= eventName #> @event);
<#
			}
			else
			{
#>
		partial void On<#= collectionMethod.Name #>(<#= GetMethodParameterList(collectionMethod) #>);
<#
			}
#>

<#
		}
#>
<#
		// Auto Create Method
		bool buildCreatedEvent = stereoTypeProperties.PropertyInstances
			.Single(property => property.Name == "BuildCreateCommand")
			.Value == "true";

		if (buildCreatedEvent)
		{
#>

		/// <summary>
		/// Create a new instance of the <see cref="<#= className #>"/>
		/// </summary>
		public virtual void Create<#= className #>(<#
		int propertyIndex= 0;
		for (int i = 0; i < collectionProperties.Count; i++)
		{
			IProperty collectionProperty = collectionProperties.ElementAt(i);
			if (collectionProperty.OwningAssociation != null)
			{
				var commandHandler = collectionProperty.OwningAssociation.AppliedStereotypes.SingleOrDefault(property => property.Name == "CommandHandler");
				// If this is a command handler association, don't add a property for it as it's a command handler definition
				if (commandHandler != null)
					continue;
				var eventLink = collectionProperty.OwningAssociation.TargetElement.AppliedStereotypes.SingleOrDefault(property => property.Name == "Event");
				// If this is an event association, don't add a property for it as it's an event definition
				if (eventLink != null)
					continue;
			}
			#><#= (propertyIndex == 0) ? string.Empty : ", " #><#= GetFullDisplayType(collectionProperty) #> <#= GetLowercaseFirstCharacter(collectionProperty.Name) #><#
			propertyIndex++;
		}
#>)
		{
			Logger.LogDebug("Entered", "<#= className #>/Create<#= className #>");
			Logger.LogDebug("Pre", "<#= className #>/OnCreate<#= className #>");
			OnCreate<#= className #>(<#
		propertyIndex= 0;
		for (int i = 0; i < collectionProperties.Count; i++)
		{
			IProperty collectionProperty = collectionProperties.ElementAt(i);
			if (collectionProperty.OwningAssociation != null)
			{
				var commandHandler = collectionProperty.OwningAssociation.AppliedStereotypes.SingleOrDefault(property => property.Name == "CommandHandler");
				// If this is a command handler association, don't add a property for it as it's a command handler definition
				if (commandHandler != null)
					continue;
				var eventLink = collectionProperty.OwningAssociation.TargetElement.AppliedStereotypes.SingleOrDefault(property => property.Name == "Event");
				// If this is an event association, don't add a property for it as it's an event definition
				if (eventLink != null)
					continue;
			}
			#><#= propertyIndex == 0 ? string.Empty : ", " #><#= GetLowercaseFirstCharacter(collectionProperty.Name) #><#
			propertyIndex++;
		}
#>);
			Logger.LogDebug("Post", "<#= className #>/OnCreate<#= className #>");
			Logger.LogDebug("Pre", "<#= className #>/ApplyChange/Create");
			ApplyChange(new <#= className #>Created(Rsn<#
		for (int i = 0; i < collectionProperties.Count; i++)
		{
			IProperty collectionProperty = collectionProperties.ElementAt(i);
			if (collectionProperty.OwningAssociation != null)
			{
				var commandHandler = collectionProperty.OwningAssociation.AppliedStereotypes.SingleOrDefault(property => property.Name == "CommandHandler");
				// If this is a command handler association, don't add a property for it as it's a command handler definition
				if (commandHandler != null)
					continue;
				var eventLink = collectionProperty.OwningAssociation.TargetElement.AppliedStereotypes.SingleOrDefault(property => property.Name == "Event");
				// If this is an event association, don't add a property for it as it's an event definition
				if (eventLink != null)
					continue;
			}
			#>, <#= GetLowercaseFirstCharacter(collectionProperty.Name) #><#
		}
#>));
			Logger.LogDebug("Post", "<#= className #>/ApplyChange");
			Logger.LogDebug("Pre", "<#= className #>/OnCreated<#= className #>");
			OnCreated<#= className #>(<#
		propertyIndex = 0;
		for (int i = 0; i < collectionProperties.Count; i++)
		{
			IProperty collectionProperty = collectionProperties.ElementAt(i);
			if (collectionProperty.OwningAssociation != null)
			{
				var commandHandler = collectionProperty.OwningAssociation.AppliedStereotypes.SingleOrDefault(property => property.Name == "CommandHandler");
				// If this is a command handler association, don't add a property for it as it's a command handler definition
				if (commandHandler != null)
					continue;
				var eventLink = collectionProperty.OwningAssociation.TargetElement.AppliedStereotypes.SingleOrDefault(property => property.Name == "Event");
				// If this is an event association, don't add a property for it as it's an event definition
				if (eventLink != null)
					continue;
			}
			#><#= propertyIndex == 0 ? string.Empty : ", " #><#= GetLowercaseFirstCharacter(collectionProperty.Name) #><#
			propertyIndex++;
		}
#>);
			Logger.LogDebug("Post", "<#= className #>/OnCreated<#= className #>");
			Logger.LogDebug("Exited", "<#= className #>/Create<#= className #>");
		}

		partial void OnCreate<#= className #>(<#
		for (int i = 0; i < collectionProperties.Count; i++)
		{
			IProperty collectionProperty = collectionProperties.ElementAt(i);
			if (collectionProperty.OwningAssociation != null)
			{
				var commandHandler = collectionProperty.OwningAssociation.AppliedStereotypes.SingleOrDefault(property => property.Name == "CommandHandler");
				// If this is a command handler association, don't add a property for it as it's a command handler definition
				if (commandHandler != null)
					continue;
				var eventLink = collectionProperty.OwningAssociation.TargetElement.AppliedStereotypes.SingleOrDefault(property => property.Name == "Event");
				// If this is an event association, don't add a property for it as it's an event definition
				if (eventLink != null)
					continue;
			}
			#><#= (i == 0) ? string.Empty : ", " #><#= GetFullDisplayType(collectionProperty) #> <#= GetLowercaseFirstCharacter(collectionProperty.Name) #><#
		}
#>);

		partial void OnCreated<#= className #>(<#
		propertyIndex = 0;
		for (int i = 0; i < collectionProperties.Count; i++)
		{
			IProperty collectionProperty = collectionProperties.ElementAt(i);
			if (collectionProperty.OwningAssociation != null)
			{
				var commandHandler = collectionProperty.OwningAssociation.AppliedStereotypes.SingleOrDefault(property => property.Name == "CommandHandler");
				// If this is a command handler association, don't add a property for it as it's a command handler definition
				if (commandHandler != null)
					continue;
				var eventLink = collectionProperty.OwningAssociation.TargetElement.AppliedStereotypes.SingleOrDefault(property => property.Name == "Event");
				// If this is an event association, don't add a property for it as it's an event definition
				if (eventLink != null)
					continue;
			}
			#><#= (propertyIndex == 0) ? string.Empty : ", " #><#= GetFullDisplayType(collectionProperty) #> <#= GetLowercaseFirstCharacter(collectionProperty.Name) #><#
			propertyIndex++;
		}
#>);

		private void Apply(<#= className #>Created @event)
		{
<#
		for (int i = 0; i < collectionProperties.Count; i++)
		{
			IProperty collectionProperty = collectionProperties.ElementAt(i);
			if (collectionProperty.OwningAssociation != null)
			{
				var commandHandler = collectionProperty.OwningAssociation.AppliedStereotypes.SingleOrDefault(property => property.Name == "CommandHandler");
				// If this is a command handler association, don't add a property for it as it's a command handler definition
				if (commandHandler != null)
					continue;
				var eventLink = collectionProperty.OwningAssociation.TargetElement.AppliedStereotypes.SingleOrDefault(property => property.Name == "Event");
				// If this is an event association, don't add a property for it as it's an event definition
				if (eventLink != null)
					continue;
			}
#>			<#= collectionProperty.Name #> = @event.<#= collectionProperty.Name #>;
<#
		}
#>
		}
<#
		}
#>
<#
		// Auto Update Method
		bool buildUpdatedEvent = stereoTypeProperties.PropertyInstances
			.Single(property => property.Name == "BuildUpdateCommand")
			.Value == "true";

		if (buildUpdatedEvent)
		{
#>

		/// <summary>
		/// Update an existing instance of the <see cref="<#= className #>"/>
		/// </summary>
		public virtual void Update<#= className #>(<#
		int propertyIndex = 0;
		for (int i = 0; i < collectionProperties.Count; i++)
		{
			IProperty collectionProperty = collectionProperties.ElementAt(i);
			if (collectionProperty.OwningAssociation != null)
			{
				var commandHandler = collectionProperty.OwningAssociation.AppliedStereotypes.SingleOrDefault(property => property.Name == "CommandHandler");
				// If this is a command handler association, don't add a property for it as it's a command handler definition
				if (commandHandler != null)
					continue;
				var eventLink = collectionProperty.OwningAssociation.TargetElement.AppliedStereotypes.SingleOrDefault(property => property.Name == "Event");
				// If this is an event association, don't add a property for it as it's an event definition
				if (eventLink != null)
					continue;
			}
			#><#= (propertyIndex == 0) ? string.Empty : ", " #><#= GetFullDisplayType(collectionProperty) #> <#= GetLowercaseFirstCharacter(collectionProperty.Name) #><#
			propertyIndex++;
		}
#>)
		{
			Logger.LogDebug("Entered", "<#= className #>/Update<#= className #>");
			Logger.LogDebug("Pre", "<#= className #>/OnUpdate<#= className #>");
			OnUpdate<#= className #>(<#
		propertyIndex = 0;
		for (int i = 0; i < collectionProperties.Count; i++)
		{
			IProperty collectionProperty = collectionProperties.ElementAt(i);
			if (collectionProperty.OwningAssociation != null)
			{
				var commandHandler = collectionProperty.OwningAssociation.AppliedStereotypes.SingleOrDefault(property => property.Name == "CommandHandler");
				// If this is a command handler association, don't add a property for it as it's a command handler definition
				if (commandHandler != null)
					continue;
				var eventLink = collectionProperty.OwningAssociation.TargetElement.AppliedStereotypes.SingleOrDefault(property => property.Name == "Event");
				// If this is an event association, don't add a property for it as it's an event definition
				if (eventLink != null)
					continue;
			}
			#><#= propertyIndex == 0 ? string.Empty : ", " #><#= GetLowercaseFirstCharacter(collectionProperty.Name) #><#
			propertyIndex++;
		}
#>);
			Logger.LogDebug("Post", "<#= className #>/OnUpdate<#= className #>");
			Logger.LogDebug("Pre", "<#= className #>/ApplyChange/Update");
			ApplyChange(new <#= className #>Updated(Rsn<#
		for (int i = 0; i < collectionProperties.Count; i++)
		{
			IProperty collectionProperty = collectionProperties.ElementAt(i);
			if (collectionProperty.OwningAssociation != null)
			{
				var commandHandler = collectionProperty.OwningAssociation.AppliedStereotypes.SingleOrDefault(property => property.Name == "CommandHandler");
				// If this is a command handler association, don't add a property for it as it's a command handler definition
				if (commandHandler != null)
					continue;
				var eventLink = collectionProperty.OwningAssociation.TargetElement.AppliedStereotypes.SingleOrDefault(property => property.Name == "Event");
				// If this is an event association, don't add a property for it as it's an event definition
				if (eventLink != null)
					continue;
			}
			#>, <#= GetLowercaseFirstCharacter(collectionProperty.Name) #><#
		}
#>));
			Logger.LogDebug("Post", "<#= className #>/ApplyChange");
			Logger.LogDebug("Pre", "<#= className #>/OnUpdated<#= className #>");
			OnUpdated<#= className #>(<#
		propertyIndex = 0;
		for (int i = 0; i < collectionProperties.Count; i++)
		{
			IProperty collectionProperty = collectionProperties.ElementAt(i);
			if (collectionProperty.OwningAssociation != null)
			{
				var commandHandler = collectionProperty.OwningAssociation.AppliedStereotypes.SingleOrDefault(property => property.Name == "CommandHandler");
				// If this is a command handler association, don't add a property for it as it's a command handler definition
				if (commandHandler != null)
					continue;
				var eventLink = collectionProperty.OwningAssociation.TargetElement.AppliedStereotypes.SingleOrDefault(property => property.Name == "Event");
				// If this is an event association, don't add a property for it as it's an event definition
				if (eventLink != null)
					continue;
			}
			#><#= propertyIndex == 0 ? string.Empty : ", " #><#= GetLowercaseFirstCharacter(collectionProperty.Name) #><#
			propertyIndex++;
		}
#>);
			Logger.LogDebug("Post", "<#= className #>/OnUpdated<#= className #>");
			Logger.LogDebug("Exited", "<#= className #>/Update<#= className #>");
		}

		partial void OnUpdate<#= className #>(<#
		propertyIndex = 0;
		for (int i = 0; i < collectionProperties.Count; i++)
		{
			IProperty collectionProperty = collectionProperties.ElementAt(i);
			if (collectionProperty.OwningAssociation != null)
			{
				var commandHandler = collectionProperty.OwningAssociation.AppliedStereotypes.SingleOrDefault(property => property.Name == "CommandHandler");
				// If this is a command handler association, don't add a property for it as it's a command handler definition
				if (commandHandler != null)
					continue;
				var eventLink = collectionProperty.OwningAssociation.TargetElement.AppliedStereotypes.SingleOrDefault(property => property.Name == "Event");
				// If this is an event association, don't add a property for it as it's an event definition
				if (eventLink != null)
					continue;
			}
			#><#= (propertyIndex == 0) ? string.Empty : ", " #><#= GetFullDisplayType(collectionProperty) #> <#= GetLowercaseFirstCharacter(collectionProperty.Name) #><#
			propertyIndex++;
		}
#>);

		partial void OnUpdated<#= className #>(<#
		propertyIndex = 0;
		for (int i = 0; i < collectionProperties.Count; i++)
		{
			IProperty collectionProperty = collectionProperties.ElementAt(i);
			if (collectionProperty.OwningAssociation != null)
			{
				var commandHandler = collectionProperty.OwningAssociation.AppliedStereotypes.SingleOrDefault(property => property.Name == "CommandHandler");
				// If this is a command handler association, don't add a property for it as it's a command handler definition
				if (commandHandler != null)
					continue;
				var eventLink = collectionProperty.OwningAssociation.TargetElement.AppliedStereotypes.SingleOrDefault(property => property.Name == "Event");
				// If this is an event association, don't add a property for it as it's an event definition
				if (eventLink != null)
					continue;
			}
			#><#= (propertyIndex == 0) ? string.Empty : ", " #><#= GetFullDisplayType(collectionProperty) #> <#= GetLowercaseFirstCharacter(collectionProperty.Name) #><#
			propertyIndex++;
		}
#>);

		private void Apply(<#= className #>Updated @event)
		{
<#
		for (int i = 0; i < collectionProperties.Count; i++)
		{
			IProperty collectionProperty = collectionProperties.ElementAt(i);
			if (collectionProperty.OwningAssociation != null)
			{
				var commandHandler = collectionProperty.OwningAssociation.AppliedStereotypes.SingleOrDefault(property => property.Name == "CommandHandler");
				// If this is a command handler association, don't add a property for it as it's a command handler definition
				if (commandHandler != null)
					continue;
				var eventLink = collectionProperty.OwningAssociation.TargetElement.AppliedStereotypes.SingleOrDefault(property => property.Name == "Event");
				// If this is an event association, don't add a property for it as it's an event definition
				if (eventLink != null)
					continue;
			}
#>			<#= collectionProperty.Name #> = @event.<#= collectionProperty.Name #>;
<#
		}
#>
		}
<#
		}
#>
<#
		// Auto Delete Method
		bool buildDeletedEvent = stereoTypeProperties.PropertyInstances
			.Single(property => property.Name == "BuildDeleteCommand")
			.Value == "true";

		if (buildDeletedEvent)
		{
#>

		/// <summary>
		/// Logically delete an existing instance of the <see cref="<#= className #>"/>
		/// </summary>
		public virtual void Delete<#= className #>()
		{
			Logger.LogDebug("Entered", "<#= className #>/Delete<#= className #>");
			Logger.LogDebug("Pre", "<#= className #>/OnDelete<#= className #>");
			OnDelete<#= className #>();
			Logger.LogDebug("Post", "<#= className #>/OnDelete<#= className #>");
			Logger.LogDebug("Pre", "<#= className #>/ApplyChange/Delete");
			ApplyChange(new <#= className #>Deleted(Rsn));
			Logger.LogDebug("Post", "<#= className #>/ApplyChange");
			Logger.LogDebug("Pre", "<#= className #>/OnDeleted<#= className #>");
			OnDeleted<#= className #>();
			Logger.LogDebug("Post", "<#= className #>/OnDeleted<#= className #>");
			Logger.LogDebug("Exited", "<#= className #>/Delete<#= className #>");
		}

		partial void OnDelete<#= className #>();

		partial void OnDeleted<#= className #>();

		private void Apply(<#= className #>Deleted @event)
		{
			IsDeleted = true;
		}
<#
		}

		// Relationship based methods

		foreach(IAssociation relationship in relationships)
		{
			bool autoGenerated = relationship.SourceElement
				.AppliedStereotypes.Any(property => property.Name == "AutoGenerated");
			if (autoGenerated)
				continue;

			string relationshipName = relationship.Name;
			if (string.IsNullOrWhiteSpace(relationshipName))
				relationshipName = ((INamedElement)relationship.SourceElement).Name;
			string targetElementName = ((INamedElement)relationship.TargetElement).Name;
			IList<IProperty> relationshipProperties = GetPropertyList((IClass)relationship.SourceElement).Where(property=> property.Type != relationship.TargetElement && property.Type != relationship.SourceElement).ToList();
			IEnumerable<IAssociation> eventRelationships = this.Element.GetRelatedLinks<IAssociation>().Where(associationEnd => associationEnd.Name == ((INamedElement)relationship.SourceElement).Name && associationEnd.SourceElement == this.Element);
			string commandName = string.Format("{0}Command", ((INamedElement)relationship.SourceElement).Name);

			var commandHandler = relationship.AppliedStereotypes.SingleOrDefault(property => property.Name == "CommandHandler");
			if (commandHandler != null)
			{
				string aggregateRootMethod = commandHandler.PropertyInstances.Single(property => property.Name == "AggregateRootMethod").Value;
				if (!string.IsNullOrWhiteSpace(aggregateRootMethod))
					relationshipName = aggregateRootMethod;
			}
#>

<#
			if (aggregateTechnology == "Akka")
			{
#>
		public virtual void <#= relationshipName #>(<#= commandName #> command)
		{
			<#= relationshipName #>(<#
				var methodBody = new System.Text.StringBuilder();
				int akkaIndex = 0;
				foreach (IProperty relationshipProperty in relationshipProperties)
				{
					if (akkaIndex > 0)
						methodBody.Append(", ");
					akkaIndex++;
					methodBody.Append("command.");
					methodBody.Append(relationshipProperty.Name);
				}
#><#= methodBody.ToString() #>);
		}

<#
			}

			string description = relationship.Description;
			if (string.IsNullOrWhiteSpace(description))
				description = relationship.SourceElement.Description;
			PushIndent("\t\t"); WriteSummaryComment(description); ClearIndent();
#>
		public virtual void <#= relationshipName #>(<#
			for (int i = 0; i < relationshipProperties.Count; i++)
			{
				IProperty relationshipProperty = relationshipProperties.ElementAt(i);
				#><#= (i == 0) ? string.Empty : ", " #><#= GetFullDisplayType(relationshipProperty) #> <#= GetLowercaseFirstCharacter(relationshipProperty.Name) #><#
			}
#>)
		{
			Logger.LogDebug("Entered", "<#= className #>/<#= relationshipName #>");
<#
		var activity = this.Element.Package.OwnedElements
			.Where(x => x is IActivity)
			.Cast<IActivity>()
			.SingleOrDefault(x => x.Name == relationshipName || x.Name == string.Format("{0}.{1}", className, relationshipName));

			if (activity != null)
			{
				var initialNode = activity.Nodes.SingleOrDefault(x => x is InitialNode);
				if (initialNode != null)
				{
					var commandNode = initialNode.Outgoings
						.Where(edge => edge.Target is IAcceptEventAction)
						.Select(edge => edge.Target)
						.Cast<IAcceptEventAction>()
						.SingleOrDefault();
					if (commandNode != null)
					{
						var commandPin = commandNode.Inputs
							.Where(x => x.Type is IClass)
							.Select(x=> x.Type)
							.Cast<IClass>()
							.SingleOrDefault(x => x.Name == ((INamedElement)relationship.SourceElement).Name && x.AppliedStereotypes.SingleOrDefault(property => property.Name == "Command") != null);
						if (commandPin != null)
						{
							string onMethodSignatures = DeeperIntoTheDecisionTree(commandNode, 1, className, relationshipName, relationshipProperties);
#>

			Logger.LogDebug("Exited", "<#= className #>/<#= relationshipName #>");
		}
<#
							Write(onMethodSignatures);
							continue;
						}
					}
				}
			}

			string eventParameters = "";
			string eventParametersWithType = "";
			string eventParameterType = "";
			string eventParameterName = "";
			foreach(IAssociation eventRelationship in eventRelationships)
			{
				string eventTargetElementName = ((INamedElement)eventRelationship.TargetElement).Name;
				if (string.IsNullOrWhiteSpace(eventParameters))
				{
					eventParameters = ", ref ";
					eventParametersWithType = ", ref ";
				}
				else
				{
					eventParameters = string.Concat(eventParameters, ", ref ");
					eventParametersWithType = string.Concat(eventParametersWithType, ", ref ");
				}
				eventParameterType = GetFullDisplayType(eventRelationship.MemberEnds.Single(x => x.Type != this.Element), editableCollection: true);
				eventParameterName = string.Concat(GetLowercaseFirstCharacter(eventTargetElementName), eventTargetElementName.EndsWith("Event") ? string.Empty : "Event", eventParameterType.StartsWith("IList<") ? "s" : string.Empty);
				eventParameters = string.Concat(eventParameters, eventParameterName);
				eventParametersWithType = string.Concat(eventParametersWithType, eventParameterType, " ", eventParameterName);
#>			<#= eventParameterType #> <#= eventParameterName #> = <#= eventParameterType.StartsWith("IList<") ? string.Concat("new ", eventParameterType.Substring(1), "()") : "null" #>;
<#
			}
#>

			On<#= relationshipName #>(<#
			for (int i = 0; i < relationshipProperties.Count; i++)
			{
				IProperty relationshipProperty = relationshipProperties.ElementAt(i);
				#><#= (i == 0) ? string.Empty : ", " #><#= GetLowercaseFirstCharacter(relationshipProperty.Name) #><#
			}
#><#= string.IsNullOrWhiteSpace(eventParameters) ? "/* Has no parameters */" : eventParameters.Substring(!relationshipProperties.Any() ? 2 : 0) #>);
<#
			foreach(IAssociation eventRelationship in eventRelationships)
			{
				string eventTargetElementName = ((INamedElement)eventRelationship.TargetElement).Name;
				eventParameterType = GetFullDisplayType(eventRelationship.MemberEnds.Single(x => x.Type != this.Element), editableCollection: true);
				eventParameterName = string.Concat(GetLowercaseFirstCharacter(eventTargetElementName), eventTargetElementName.EndsWith("Event") ? string.Empty : "Event", eventParameterType.StartsWith("IList<") ? "s" : string.Empty);
#>
			if (<#= eventParameterName #> != null)
			{
				Logger.LogDebug("Pre", "<#= className #>/<#= relationshipName #>/ApplyChange/<#= eventTargetElementName #>");
				ApplyChange<#= eventParameterType.StartsWith("IList<") ? "s" : string.Empty #>(<#= eventParameterName #>);
				Logger.LogDebug("Post", "<#= className #>/<#= relationshipName #>/ApplyChange/<#= eventTargetElementName #>");
			}
<#
			}
#>

			Logger.LogDebug("Pre", "<#= className #>/<#= relationshipName #>/On<#= relationshipName #>Handled");
			On<#= relationshipName #>Handled(<#
			for (int i = 0; i < relationshipProperties.Count; i++)
			{
				IProperty relationshipProperty = relationshipProperties.ElementAt(i);
				#><#= (i == 0) ? string.Empty : ", " #><#= GetLowercaseFirstCharacter(relationshipProperty.Name) #><#
			}
#>);
			Logger.LogDebug("Post", "<#= className #>/<#= relationshipName #>/On<#= relationshipName #>Handled");

			Logger.LogDebug("Exited", "<#= className #>/<#= relationshipName #>");
		}

		partial void On<#= relationshipName #>(<#
			for (int i = 0; i < relationshipProperties.Count; i++)
			{
				IProperty relationshipProperty = relationshipProperties.ElementAt(i);
				#><#= (i == 0) ? string.Empty : ", " #><#= GetFullDisplayType(relationshipProperty) #> <#= GetLowercaseFirstCharacter(relationshipProperty.Name) #><#
			}
#><#= string.IsNullOrWhiteSpace(eventParametersWithType) ? "/* Has no parameters */" : eventParametersWithType.Substring(!relationshipProperties.Any() ? 2 : 0) #>);

		partial void On<#= relationshipName #>Handled(<#
			for (int i = 0; i < relationshipProperties.Count; i++)
			{
				IProperty relationshipProperty = relationshipProperties.ElementAt(i);
				#><#= (i == 0) ? string.Empty : ", " #><#= GetFullDisplayType(relationshipProperty) #> <#= GetLowercaseFirstCharacter(relationshipProperty.Name) #><#
			}
#>);
<#
			foreach(IAssociation eventRelationship in eventRelationships)
			{
				string eventTargetElementName = ((INamedElement)eventRelationship.TargetElement).Name;
#>

		private void Apply(<#= eventTargetElementName #> @event)
		{
			Apply<#= eventTargetElementName #>(@event);
		}

		partial void Apply<#= eventTargetElementName #>(<#= eventTargetElementName #> @event);
<#
			}
		}
#>

		<#= GetGeneratedCodeAttribute() #>
		<#= GetServiceContractAttribute(this.Element) #>
		public partial class <#= className #>Snapshot : Snapshot
		{
			public Guid Rsn
			{
				get { return Id; }
				internal set { Id = value; }
			}

			public bool IsDeleted {get; internal set;}
<#
		// Properties
		foreach(IProperty collectionProperty in collectionProperties)
		{
			if (collectionProperty.OwningAssociation != null)
			{
				var commandHandler = collectionProperty.OwningAssociation.AppliedStereotypes.SingleOrDefault(property => property.Name == "CommandHandler");
				// If this is a command handler association, don't add a property for it as it's a command handler definition
				if (commandHandler != null)
					continue;
				var eventLink = collectionProperty.OwningAssociation.TargetElement.AppliedStereotypes.SingleOrDefault(property => property.Name == "Event");
				// If this is an event association, don't add a property for it as it's an event definition
				if (eventLink != null)
					continue;
			}
#>

<# PushIndent("\t\t"); WriteSummaryComment(collectionProperty.Description); ClearIndent(); #>
			<#= GetPropertyVisibility(collectionProperty) #> <#= GetFullDisplayType(collectionProperty) #> <#= collectionProperty.Name #> { get; internal set; }
<#
		}
#>
		}

		public static explicit operator <#= className #>Snapshot(<#= className #> aggregate)
		{
			return new <#= className #>Snapshot
			{
<#
		// Properties
		foreach(IProperty collectionProperty in collectionProperties)
		{
			if (collectionProperty.OwningAssociation != null)
			{
				var commandHandler = collectionProperty.OwningAssociation.AppliedStereotypes.SingleOrDefault(property => property.Name == "CommandHandler");
				// If this is a command handler association, don't add a property for it as it's a command handler definition
				if (commandHandler != null)
					continue;
				var eventLink = collectionProperty.OwningAssociation.TargetElement.AppliedStereotypes.SingleOrDefault(property => property.Name == "Event");
				// If this is an event association, don't add a property for it as it's an event definition
				if (eventLink != null)
					continue;
			}
#>
				<#= collectionProperty.Name #> = aggregate.<#= collectionProperty.Name #>,
<#
		}
#>
				IsDeleted = aggregate.IsDeleted,
				Rsn = aggregate.Rsn
			};
		}
<#
		if (isSnapshotable)
		{
#>

		#region Overrides of SnapshotAggregateRoot<<#= authenticationTokenType #>,<#= className #>Snapshot>

		/// <summary>
		/// Create a <see cref="<#= className #>Snapshot"/> of the current state of this instance.
		/// </summary>
		protected override <#= className #>Snapshot CreateSnapshot()
		{
			<#= className #>Snapshot snaphot = null;
			Make<#= className #>Snapshot(ref snaphot);
			if (snaphot == null)
				snaphot = (<#= className #>Snapshot)this;
			return snaphot;
		}

		partial void Make<#= className #>Snapshot(ref <#= className #>Snapshot snaphot);

		/// <summary>
		/// Rehydrate this instance from the provided <paramref name="snapshot"/>.
		/// </summary>
		/// <param name="snapshot">The <see cref="<#= className #>Snapshot"/> to rehydrate this instance from.</param>
		protected override void RestoreFromSnapshot(<#= className #>Snapshot snapshot)
		{
			bool runDefaultRestoration = true;
			Restore<#= className #>FromSnapshot(ref runDefaultRestoration);
			if (runDefaultRestoration)
			{
<#
			// Properties
			foreach(IProperty collectionProperty in collectionProperties)
			{
				if (collectionProperty.OwningAssociation != null)
				{
					var commandHandler = collectionProperty.OwningAssociation.AppliedStereotypes.SingleOrDefault(property => property.Name == "CommandHandler");
					// If this is a command handler association, don't add a property for it as it's a command handler definition
					if (commandHandler != null)
						continue;
					var eventLink = collectionProperty.OwningAssociation.TargetElement.AppliedStereotypes.SingleOrDefault(property => property.Name == "Event");
					// If this is an event association, don't add a property for it as it's an event definition
					if (eventLink != null)
						continue;
				}
#>
				<#= collectionProperty.Name #> = snapshot.<#= collectionProperty.Name #>;
<#
			}
#>
				IsDeleted = snapshot.IsDeleted;
				Rsn = snapshot.Rsn;
			}
		}

		partial void Restore<#= className #>FromSnapshot(ref bool runDefaultRestoration);

		#endregion

<#
		}
#>
	}
}

namespace <#= classNamespace #>.Events { }
namespace <#= classNamespace #>.Commands { }
<#+
	protected override bool AppliesToElement()
	{
		return ShouldGenerateCodeForElement(this.Element) && this.Element.AppliedStereotypes.Any(property => property.Name == "AggregateRoot");
	}
#>
