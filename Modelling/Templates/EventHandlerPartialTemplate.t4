<#@ Include File="TemplateHeader.t4" #>
<#@ Modeling ElementType="Microsoft.VisualStudio.Uml.Classes.IClass" Processor="ModelingProcessor" ApplyStereotypes="CSharp" #>
<#@ Import Namespace="Microsoft.VisualStudio.ArchitectureTools.Extensibility.Uml" #>
<#@ Import Namespace="Microsoft.VisualStudio.Uml.AuxiliaryConstructs" #>
<#@ import namespace="Microsoft.VisualStudio.Uml.Classes" #>
<#@ Include File="CSharpCommentHelpers.t4" #>
<#@ Include File="CSharpHelpers.t4" #>
<#@ Include File="CqrsTemplateHelpers.t4" #>
<#@ Include File="ModelHelper.t4" #>
<#@ Output Extension=".cs" #>
<#
var stereoTypeProperties = this.Element.AppliedStereotypes.Single(property => property.Name == "EventHandler");

string classNamespace = GetNamespace(this.Element.Namespace);
string className = ClassifierName(this.Element);
string entityName = stereoTypeProperties.PropertyInstances
	.Single(property => property.Name == "EntityName")
	.Value;
if (string.IsNullOrWhiteSpace(entityName))
	entityName = null;
string evName = stereoTypeProperties.PropertyInstances
	.Single(property => property.Name == "EventName")
	.Value;
if (string.IsNullOrWhiteSpace(evName))
	evName = null;

IList<string> eventNames = new List<string>();
if (!string.IsNullOrWhiteSpace(evName))
	eventNames.Add(evName);

IEnumerable<IAssociation> relationships = this.Element.GetRelatedLinks<IAssociation>().Where(associationEnd => associationEnd.TargetElement == this.Element);
// related events etc
foreach(IAssociation relationship in relationships)
{
	var eventLink = relationship.SourceElement.AppliedStereotypes.SingleOrDefault(property => property.Name == "Event");
	if (eventLink != null)
	{
		if (!eventNames.Contains(((INamedElement)relationship.SourceElement).Name))
			eventNames.Add(string.Format("{0}.{1}", GetNamespace(((INamedElement)relationship.SourceElement).Namespace), ((INamedElement)relationship.SourceElement).Name));
	}
}

// using statements
#>
using System;
using cdmdotnet.AutoMapper;
using Chinchilla.Logging;
using Cqrs.Entities;

namespace <#= classNamespace #>.Handlers
{
	public <#= GetAbstract(this.Element) #> partial class <#= entityName ?? className #>EventHandler
	{<#
	foreach(string eventName in eventNames)
	{
#>

		partial void OnHandle(<#= eventName #> @event)
		{
			throw new NotImplementedException();
		}
<# } #>
	}
}
<#+
	protected override bool AppliesToElement()
	{
		return ShouldGenerateCodeForElement(this.Element) && this.Element.AppliedStereotypes.Any(property => property.Name == "EventHandler");
	}
#>