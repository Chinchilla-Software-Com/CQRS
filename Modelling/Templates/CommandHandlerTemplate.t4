<#@ Include File="TemplateHeader.t4" #>
<#@ Modeling ElementType="Microsoft.VisualStudio.Uml.Classes.IClass" Processor="ModelingProcessor" ApplyStereotypes="CSharp" #>
<#@ Import Namespace="Microsoft.VisualStudio.ArchitectureTools.Extensibility.Uml" #>
<#@ Import Namespace="Microsoft.VisualStudio.Uml.AuxiliaryConstructs" #>
<#@ import namespace="Microsoft.VisualStudio.Uml.Classes" #>
<#@ Include File="CSharpCommentHelpers.t4" #>
<#@ Include File="CSharpHelpers.t4" #>
<#@ Include File="CqrsTemplateHelpers.t4" #>
<#@ Include File="ModelHelper.t4" #>
<#@ Output Extension=".cs" #>
<#
var stereoTypeProperties = this.Element.AppliedStereotypes.Single(property => property.Name == "Command");
string authenticationTokenType = GetDomainAuthenticationTokenType(this.Element);

// Header
WriteAutoGeneratedWarningHeader();

string classNamespace = GetNamespace(this.Element.Namespace);
string className = ClassifierName(this.Element);
string baseClass = GetBaseClass(this.Element);

// using statements
WriteUsingStatements(this.Element);
string aggregateTechnology = GetAggregateTechnology(this.Element);
#>
using Cqrs.Commands;
using Cqrs.Configuration;
using Cqrs.Domain;
using Cqrs.Domain.Exceptions;
using Cqrs.Events;
using Chinchilla.Logging;

namespace <#= classNamespace #>.Handlers
{
<#
	// Class and Attributes
	string commandHandlerTechnologyBaseClass = "ICommandHandler<" + authenticationTokenType + ", " + className + "Command>";
	if (!string.IsNullOrWhiteSpace(baseClass))
	{
		baseClass = ": " + baseClass;
		commandHandlerTechnologyBaseClass = ", " + commandHandlerTechnologyBaseClass;
	}
	else
		commandHandlerTechnologyBaseClass = ": " + commandHandlerTechnologyBaseClass;
#>
	<#= GetGeneratedCodeAttribute() #>
	public <#= GetAbstract(this.Element) #> partial class <#= className #>CommandHandler
		<#= baseClass #>
		<#= commandHandlerTechnologyBaseClass #>
	{
<#
IEnumerable<IAssociation> relationships = this.Element.GetRelatedLinks<IAssociation>().Where(associationEnd => !string.IsNullOrWhiteSpace(associationEnd.Name) && associationEnd.SourceElement == this.Element);

IList<IProperty> collectionProperties = GetPropertyList(this.Element).Where(property=> property.Type != this.Element).ToList();

bool createsNewInstance = stereoTypeProperties.PropertyInstances.Any(property => property.Name == "CreatesNewInstance" && property.Value == "true");
if (!relationships.Any())
{
#>
		#region Implementation of ICommandHandler<in <#= className #>>

		public void Handle(<#= className #>Command command)
		{
			ICommandValidator<<#= authenticationTokenType #>, <#= className #>Command> commandValidator = null;
			try
			{
				commandValidator = DependencyResolver.Resolve<ICommandValidator<<#= authenticationTokenType #>, <#= className #>Command>>();
			}
			catch (Exception exception)
			{
				Logger.LogDebug("Locating an ICommandValidator failed.", "<#= className #>CommandHandler\\Handle(<#= className #>Command)", exception);
			}

			if (commandValidator != null && !commandValidator.IsCommandValid(command))
			{
				Logger.LogInfo("The provided command is not valid.", "<#= className #>CommandHandler\\Handle(<#= className #>Command)");
				return;
			}

<#
	string aggregateRootName = null;
	bool isSimple = stereoTypeProperties.PropertyInstances.Any(property => property.Name == "CommandType" && property.Value == "Simple");
	if (isSimple)
		aggregateRootName = stereoTypeProperties.PropertyInstances.Single(property => property.Name == "AggregateRoot").Value;
	if (isSimple && !string.IsNullOrWhiteSpace(aggregateRootName))
	{
			var aggregateRoot = AllElements(FindDomainElement(this.Element), "AggregateRoot").OfType<INamedElement>().Single(e => e.Name == aggregateRootName);
			var aggregateRootStereoTypeProperties = aggregateRoot.AppliedStereotypes.Single(property => property.Name == "AggregateRoot");
			bool isSnapshotable = aggregateRootStereoTypeProperties.PropertyInstances
				.Single(property => property.Name == "IsSnapshotable")
				.Value == "true";

#>
			<#= aggregateRootName #> item = null;
			On<#= className #>(command, ref item);
			if (item == null)
<#
		if (createsNewInstance)
		{
#>
			{
				item = new <#= aggregateRootName #>(DependencyResolver, Logger, command.Rsn == Guid.Empty ? Guid.NewGuid() : command.Rsn);
				UnitOfWork.Add(item);
			}
<#
		}
		else
		{
#>
				item = UnitOfWork.Get<<#= aggregateRootName #>>(command.Rsn, useSnapshots: <#= isSnapshotable.ToString().ToLowerInvariant() #>);
<#
		}
#>
<#
			int processedProperties= 0;
			if (aggregateTechnology == "Akka")
			{
#>
			var actor = item as IActorRef;
			if (actor != null)
				actor.Tell(new <#= className #>Parameters{<#
		for (int i = 0; i < collectionProperties.Count; i++)
		{
			IProperty collectionProperty = collectionProperties.ElementAt(i);
			if (collectionProperty.OwningAssociation != null)
			{
				var commandHandler = collectionProperty.OwningAssociation.AppliedStereotypes.SingleOrDefault(property => property.Name == "CommandHandler");
				// If this is a command handler association, don't add a property for it as it's a command handler definition
				if (commandHandler != null)
					continue;
			}
			if (processedProperties > 0)
			{
			#>, <#
			}
			#><#= GetLowercaseFirstCharacter(collectionProperty.Name) #>: command.<#= collectionProperty.Name #><#
			processedProperties++;
		}
#>});
			else
<#
			}
#>
				item.<#= className #>(<#
		processedProperties= 0;
		for (int i = 0; i < collectionProperties.Count; i++)
		{
			IProperty collectionProperty = collectionProperties.ElementAt(i);
			if (collectionProperty.OwningAssociation != null)
			{
				var commandHandler = collectionProperty.OwningAssociation.AppliedStereotypes.SingleOrDefault(property => property.Name == "CommandHandler");
				// If this is a command handler association, don't add a property for it as it's a command handler definition
				if (commandHandler != null)
					continue;
			}
			if (processedProperties > 0)
			{
			#>, <#
			}
			#><#= GetLowercaseFirstCharacter(collectionProperty.Name) #>: command.<#= collectionProperty.Name #><#
			processedProperties++;
		}
#>);
			On<#= className #>Done(command, item);
			OnCommit(command, item);
			try
			{
				UnitOfWork.Commit();
			}
			catch (ConcurrencyException exception)
			{
				Logger.LogDebug(string.Format("Committing the Unit Of Work for command of type '{0}' with Rsn '{1}' failed.", command.GetType().FullName, command.Rsn), "Handle/<#= className #>Command", exception: new DuplicateCreateCommandException(command.GetType(), command.Rsn, exception));
<#
		if (createsNewInstance)
		{
#>
				var eventPublisher = DependencyResolver.Resolve<IEventPublisher<<#= authenticationTokenType #>>>();

				var duplicateCreateCommandEvent = new DuplicateCreateCommandEvent<<#= authenticationTokenType #>>
				{
					Id = Guid.NewGuid(),
					AggregateRsn = command.Rsn,
					AggregateType = typeof(<#= aggregateRootName #>)
				};
				eventPublisher.Publish(duplicateCreateCommandEvent);
<#
		}
#>
			}
			OnCommited(command, item);
<#
	}
	else
	{
#>
			OnHandle(command);
<#
	}
#>
		}

		#endregion
<#
	if (isSimple && !string.IsNullOrWhiteSpace(aggregateRootName))
	{
#>

		partial void On<#= className #>(<#= className #>Command command, ref <#= aggregateRootName #> item);

		partial void On<#= className #>Done(<#= className #>Command command, <#= aggregateRootName #> item);

		partial void OnCommit(<#= className #>Command command, <#= aggregateRootName #> item);

		partial void OnCommited(<#= className #>Command command, <#= aggregateRootName #> item);
<#
	}
	else
	{
#>
		partial void OnHandle(<#= className #>Command command);
<#
	}
}
#>

<#
		IList<IOperation> collectionMethods = GetMethodList(this.Element);
		// Methods
		foreach(IOperation collectionMethod in collectionMethods)
		{
#>
		public void <#= collectionMethod.Name #>(<#= GetMethodParameterList(collectionMethod) #>)
		{
			On<#= collectionMethod.Name #>(<#= GetMethodParameterNameList(collectionMethod) #>);
		}

		partial void On<#= collectionMethod.Name #>(<#= GetMethodParameterList(collectionMethod) #>);
<#
		}

		// Relationships

		foreach(IAssociation relationship in relationships)
		{
			string targetElementName = ((INamedElement)relationship.TargetElement).Name;
			aggregateTechnology = GetAggregateTechnology(relationship.TargetElement);
			string relationshipName = relationship.Name;
			var commandHandler = relationship.AppliedStereotypes.SingleOrDefault(property => property.Name == "CommandHandler");
			if (commandHandler != null)
			{
				string aggregateRootMethod = commandHandler.PropertyInstances.Single(property => property.Name == "AggregateRootMethod").Value;
				if (!string.IsNullOrWhiteSpace(aggregateRootMethod))
					relationshipName = aggregateRootMethod;
			}
#>
		#region Implementation of ICommandHandler<in <#= className #>>

		public void Handle(<#= className #>Command command)
		{
			ICommandValidator<<#= authenticationTokenType #>, <#= className #>Command> commandValidator = null;
			try
			{
				commandValidator = DependencyResolver.Resolve<ICommandValidator<<#= authenticationTokenType #>, <#= className #>Command>>();
			}
			catch (Exception exception)
			{
				Logger.LogDebug("Locating an ICommandValidator failed.", "<#= className #>CommandHandler\\Handle(<#= className #>Command)", exception);
			}

			if (commandValidator != null && !commandValidator.IsCommandValid(command))
			{
				Logger.LogInfo("The provided command is not valid.", "<#= className #>CommandHandler\\Handle(<#= className #>Command)");
				return;
			}

			bool continueExecution = true;
			OnHandle(command, ref continueExecution);
			if (continueExecution)
			{
				Guid rsn = command.Rsn;
<#
			if (aggregateTechnology == "Akka")
			{
				if (createsNewInstance)
				{
#>
				rsn = Guid.NewGuid();
<#
				}
#>
				global::Akka.Actor.IActorRef item = AggregateResolver.ResolveActor<<#= targetElementName #>, <#= authenticationTokenType #>>(rsn);
				// bool result = global::Akka.Actor.Futures.Ask<bool>(item, command).Result;
				global::Akka.Actor.ActorRefImplicitSenderExtensions.Tell(item, command);
<#
			}
			else
			{
#>
				<#= targetElementName #> item = null;
				On<#= relationshipName #>(command, ref item);
				if (item == null)
<#
				if (createsNewInstance)
				{
#>
				{
					item = new <#= targetElementName #>(DependencyResolver, Logger, command.Rsn == Guid.Empty ? Guid.NewGuid() : command.Rsn);
					UnitOfWork.Add(item);
				}
<#
				}
				else
				{
					var aggregateRoot = AllElements(FindDomainElement(this.Element), "AggregateRoot").OfType<INamedElement>().Single(e => e.Name == targetElementName);
					var aggregateRootStereoTypeProperties = aggregateRoot.AppliedStereotypes.Single(property => property.Name == "AggregateRoot");
					bool isSnapshotable = aggregateRootStereoTypeProperties.PropertyInstances
						.Single(property => property.Name == "IsSnapshotable")
						.Value == "true";
#>
					item = UnitOfWork.Get<<#= targetElementName #>>(command.Rsn, useSnapshots: <#= isSnapshotable.ToString().ToLowerInvariant() #>);
<#
				}
#>
				item.<#= relationshipName #>(<#
				int processedProperties= 0;
				for (int i = 0; i < collectionProperties.Count; i++)
				{
					IProperty collectionProperty = collectionProperties.ElementAt(i);
					if (collectionProperty.OwningAssociation != null)
					{
						// This is new but supposed to remove any generation of relationships sine we only use attributes
						continue;
/*
						var commandHandler = collectionProperty.OwningAssociation.AppliedStereotypes.SingleOrDefault(property => property.Name == "CommandHandler");
						// If this is a command handler association, don't add a property for it as it's a command handler definition
						if (commandHandler != null)
							continue;
*/
					}
			#><#= (processedProperties == 0) ? string.Empty : ", " #>command.<#= collectionProperty.Name #><#
				processedProperties++;
				}
#>);
				On<#= relationshipName #>Handled(command, item);
				OnAddToUnitOfWork(command, item);
				UnitOfWork.Add(item);
				OnAddedToUnitOfWork(command, item);
				OnCommit(command, item);
				UnitOfWork.Commit();
				OnCommited(command, item);
<#
			}
#>
			}
		}

		#endregion

		partial void OnHandle(<#= className #>Command command, ref bool continueExecution);

		partial void On<#= relationshipName #>(<#= className #>Command command, ref <#= targetElementName #> item);

		partial void On<#= relationshipName #>Handled(<#= className #>Command command, <#= targetElementName #> item);

		partial void OnAddToUnitOfWork(<#= className #>Command command, <#= targetElementName #> item);

		partial void OnAddedToUnitOfWork(<#= className #>Command command, <#= targetElementName #> item);

		partial void OnCommit(<#= className #>Command command, <#= targetElementName #> item);

		partial void OnCommited(<#= className #>Command command, <#= targetElementName #> item);
<#
		}
#>

		protected ILogger Logger { get; private set; }

		protected IDependencyResolver DependencyResolver { get; private set; }
<#
		if (aggregateTechnology == "Akka")
		{
#>

		protected Cqrs.Akka.Domain.IAkkaAggregateResolver AggregateResolver { get; private set; }

		/// <summary>
		/// Instantiates the <see cref="<#= className #>CommandHandler"/> class registering any <see cref="Akka.Actor.ReceiveActor.Receive{T}(System.Func{T,System.Threading.Tasks.Task})"/> required.
		/// </summary>
		public <#= className #>CommandHandler(Cqrs.Akka.Domain.IAkkaAggregateResolver aggregateResolver, IDependencyResolver dependencyResolver, ILogger logger)
			: this (dependencyResolver, logger)
		{
			AggregateResolver = aggregateResolver;
		}
<#
		}
		else
		{
#>

		protected IUnitOfWork<<#= authenticationTokenType #>> UnitOfWork { get; private set; }

		public <#= className #>CommandHandler(IUnitOfWork<<#= authenticationTokenType #>> unitOfWork, IDependencyResolver dependencyResolver, ILogger logger)
			: this (dependencyResolver, logger)
		{
			UnitOfWork = unitOfWork;
		}
<#
		}
#>

		public <#= className #>CommandHandler(IDependencyResolver dependencyResolver, ILogger logger)
		{
			DependencyResolver = dependencyResolver;
			Logger = logger;
		}
	}
}
<#+
	protected override bool AppliesToElement()
	{
		return ShouldGenerateCodeForElement(this.Element) && this.Element.AppliedStereotypes.Any(property => property.Name == "Command");
	}
#>