<#@ Include File="TemplateHeader.t4" #>
<#@ Modeling ElementType="Microsoft.VisualStudio.Uml.Classes.IClass" Processor="ModelingProcessor" ApplyStereotypes="CSharp" #>
<#@ Import Namespace="Microsoft.VisualStudio.ArchitectureTools.Extensibility.Uml" #>
<#@ Import Namespace="Microsoft.VisualStudio.Uml.AuxiliaryConstructs" #>
<#@ import namespace="Microsoft.VisualStudio.Uml.Classes" #>
<#@ Include File="CSharpCommentHelpers.t4" #>
<#@ Include File="CSharpHelpers.t4" #>
<#@ Include File="CqrsTemplateHelpers.t4" #>
<#@ Include File="ModelHelper.t4" #>
<#@ Output Extension=".cs" #>
<#
var stereoTypeProperties = this.Element.AppliedStereotypes.Single(property => property.Name == "Entity");
bool isAggregateTo = this.Element.AppliedStereotypes.Any(property => property.Name == "AggregateRoot");
string authenticationTokenType = GetDomainAuthenticationTokenType(this.Element);

// Header
WriteAutoGeneratedWarningHeader();

string classNamespace = GetNamespace(this.Element.Namespace);
if (classNamespace.EndsWith(".Entities"))
	classNamespace = classNamespace + ".EventHandlers";
else
	classNamespace = classNamespace  + ".Handlers";
string className = ClassifierName(this.Element);
string baseClass = GetBaseClass(this.Element);
string entityName = className;

// using statements
#>
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
<#
string eventHandlerTechnology = GetEventHandlerTechnology(this.Element);
switch(eventHandlerTechnology)
{
	case "Akka":
		baseClass = "ReceiveActor";
#>using Akka.Actor;
<#
		break;
	default:
		// for now do nothing
		break;
}
#>
using cdmdotnet.AutoMapper;
using Chinchilla.Logging;
using Cqrs.Events;
using Cqrs.Domain;
using <#= classNamespace.Substring(0, classNamespace.LastIndexOf(".")) #>.Repositories;

namespace <#= classNamespace #>
{
<#
	IEnumerable<IAssociation> relationships = this.Element.GetRelatedLinks<IAssociation>().Where(associationEnd => associationEnd.TargetElement == this.Element);
#>
	<#= GetGeneratedCodeAttribute() #>
	public <#= GetAbstract(this.Element) #> partial class <#= className #>EventHandler
<#
	int index = 0;
	foreach(IAssociation relationship in relationships)
	{
		var targetElement = (INamedElement)relationship.TargetElement;
		var sourceElement = (INamedElement)relationship.SourceElement;

		if (!sourceElement.AppliedStereotypes.Any(property => property.Name == "Event"))
			continue;

		string entityElementName = string.Format("{0}.{1}", GetNamespace(targetElement.Namespace).Replace("::", "."), targetElement.Name);
		string eventElementName = string.Format("{0}.{1}", GetNamespace(sourceElement.Namespace).Replace("::", "."), sourceElement.Name);
#>
		<#= index == 0 ? ":" : "," #> IEventHandler<<#= authenticationTokenType #>, <#= eventElementName #>>
<#
		index++;
	}
#>
	{
<#
switch(eventHandlerTechnology)
{
	case "Akka":
		baseClass = "ReceiveActor";
#>
		/// <summary>
		/// Instantiates the <see cref="<#= className #>EventHandler"/> class registering any <see cref="Akka.Actor.ReceiveActor.Receive{T}(System.Func{T,System.Threading.Tasks.Task})"/> required.
		/// </summary>
		public <#= className #>EventHandler()
		{
<#
	foreach(IAssociation relationship in relationships)
	{
		var targetElement = (INamedElement)relationship.TargetElement;
		var sourceElement = (INamedElement)relationship.SourceElement;

		if (!sourceElement.AppliedStereotypes.Any(property => property.Name == "Event"))
			continue;

		string entityElementName = string.Format("{0}.{1}", GetNamespace(targetElement.Namespace).Replace("::", "."), targetElement.Name);
		string eventElementName = string.Format("{0}.{1}", GetNamespace(sourceElement.Namespace).Replace("::", "."), sourceElement.Name);
#>
			Receive<<#= eventElementName #>>(@event => Handle(@event));
<#
	}
#>
		}
<#
		break;
	default:
		// for now do nothing
		break;
}
#>

		public <#= className #>EventHandler(ILogger logger, IAutomapHelper automapHelper, I<#= className #>Repository <#= GetLowercaseFirstCharacter(className) #>Repository)
		{
			Logger = logger;
			AutomapHelper = automapHelper;
			<#= className #>Repository = <#= GetLowercaseFirstCharacter(className) #>Repository;
		}

		protected ILogger Logger { get; private set; }

		protected IAutomapHelper AutomapHelper { get; private set; }

		protected I<#= className #>Repository <#= className #>Repository { get; private set; }
<#
foreach(IAssociation relationship in relationships)
{
		var targetElement = (INamedElement)relationship.TargetElement;
		var sourceElement = (INamedElement)relationship.SourceElement;

		if (!sourceElement.AppliedStereotypes.Any(property => property.Name == "Event"))
			continue;

		string entityElementName = string.Format("{0}.{1}", GetNamespace(targetElement.Namespace).Replace("::", "."), targetElement.Name);
		string eventElementName = string.Format("{0}.{1}", GetNamespace(sourceElement.Namespace).Replace("::", "."), sourceElement.Name);

		string eventName= eventElementName;
		string entityNameAsInterface = entityName;
		string repositoryName = entityNameAsInterface;
		int lastIndex = entityNameAsInterface.LastIndexOf(".");
		if (lastIndex == -1)
			entityNameAsInterface = string.Format("Repositories.I{0}", entityNameAsInterface);
		else
		{
			repositoryName = entityNameAsInterface.Substring(lastIndex + 1);
			entityNameAsInterface = string.Format("{0}Repositories.I{1}", entityNameAsInterface.Substring(0, lastIndex) + 1, repositoryName);
		}
		
		var entityStereoTypeProperties = relationship.AppliedStereotypes.Single(property => property.Name == "EventHandler");
		bool createDontUpdateEntity = entityStereoTypeProperties.PropertyInstances
			.Any(property => property.Name == "CreateDontUpdateEntity" && property.Value == "true");
#>

		#region Implementation of IEventHandler<in <#= eventName #>>

		public void Handle(<#= eventName #> @event)
		{
			string eventTypeName = @event.GetType().FullName;
			OnHandle(@event);

			var entities = new List<<#= entityName #><#= isAggregateTo ? "Entity" : string.Empty #>>();

			bool singleItemNotCollection = true;
			OnPreGet(@event, ref singleItemNotCollection);
			bool isANewEntity = <#= createDontUpdateEntity.ToString().ToLowerInvariant() #>;
			if (singleItemNotCollection)
			{
				<#= entityName #><#= isAggregateTo ? "Entity" : string.Empty #> entity = null;
				OnGetEntity(@event, ref entity);
				if (entity == null)
				{
					Guid? rsn = null;
					bool throwExceptionOnMissingEntity = true;
					GetSingleEntityRsn(@event, ref rsn, ref throwExceptionOnMissingEntity);
					if (rsn == null)
						rsn = @event.Rsn;
					else
						Logger.LogDebug(string.Format("Event type '{0}' with Rsn '{1:N}': Rsn manually provided.", eventTypeName, @event.Rsn));
					if (!throwExceptionOnMissingEntity)
						Logger.LogDebug(string.Format("Event type '{0}' with Rsn '{1:N}': Can expect no value from the repository without an exception.", eventTypeName, @event.Rsn));
<#
				if (createDontUpdateEntity)
				{
#>
					entity = new <#= entityName #><#= isAggregateTo ? "Entity" : string.Empty #>{ Rsn = rsn.Value };
<#
				}
				else
				{
#>
					entity = <#= className #>Repository.Load(rsn.Value, throwExceptionOnMissingEntity);
					if (entity == null)
					{
					  entity = new <#= entityName #><#= isAggregateTo ? "Entity" : string.Empty #>{ Rsn = rsn.Value };
					  isANewEntity = true;
					}
<#
				}
#>
				}
				else
					Logger.LogDebug(string.Format("Event type '{0}' with Rsn '{1:N}': Entity manually provided.", eventTypeName, @event.Rsn));
				OnGotEntity(@event, ref entity);
				entities.Add(entity);
			}
			else
			{
				Logger.LogDebug(string.Format("Event type '{0}' with Rsn '{1:N}': Several entities will be loaded manually.", eventTypeName, @event.Rsn));
				IEnumerable<<#= entityName #><#= isAggregateTo ? "Entity" : string.Empty #>> manualEntities = null;
				OnGetEntities(@event, ref manualEntities);
				if (manualEntities != null)
					entities.AddRange(manualEntities);
			}
			for (int i = 0; i < entities.Count; i++)
			{
				<#= entityName #><#= isAggregateTo ? "Entity" : string.Empty #> entity = entities[i];

				bool autoMap = true;
				OnUpdateEntity(@event, ref entity, ref autoMap);
				if (autoMap)
					AutomapHelper.Automap(@event, entity);
				else
					Logger.LogDebug(string.Format("Event type '{0}' with Rsn '{1:N}': Is not auto-mapped.", eventTypeName, @event.Rsn));
				OnEntityUpdated(@event, ref entity);

				bool continueWithRepositorySave = true;
				bool createDontUpdate = <#= createDontUpdateEntity.ToString().ToLowerInvariant() #> || isANewEntity;
				OnSaveEntity(@event, ref entity, ref continueWithRepositorySave, ref createDontUpdate);
				if (continueWithRepositorySave)
				{
					if (createDontUpdate)
					{
						<#= className #>Repository.Create(entity);
						Logger.LogDebug(string.Format("Event type '{0}' with Rsn '{1:N}': Created in repository.", eventTypeName, @event.Rsn));
					}
					else
					{
						<#= className #>Repository.Update(entity);
						Logger.LogDebug(string.Format("Event type '{0}' with Rsn '{1:N}': Updated in repository.", eventTypeName, @event.Rsn));
					}
				}
				else
					Logger.LogDebug(string.Format("Event type '{0}' with Rsn '{1:N}': Not auto-saving.", eventTypeName, @event.Rsn));
				OnEntitySaved(@event, ref entity);
			}
			OnHandled(@event);
		}

		#endregion

		#region Implementation of IEventHandler<in <#= eventName #>> Partials

		partial void OnHandle(<#= eventName #> @event);

		partial void OnPreGet(<#= eventName #> @event, ref bool singleItemNotCollection);

		partial void GetSingleEntityRsn(<#= eventName #> @event, ref Guid? rsn, ref bool throwExceptionOnMissingEntity);

		partial void OnGetEntities(<#= eventName #> @event, ref IEnumerable<<#= entityName #><#= isAggregateTo ? "Entity" : string.Empty #>> manualEntities);

		partial void OnGetEntity(<#= eventName #> @event, ref <#= entityName #><#= isAggregateTo ? "Entity" : string.Empty #> entity);

		partial void OnGotEntity(<#= eventName #> @event, ref <#= entityName #><#= isAggregateTo ? "Entity" : string.Empty #> entity);

		partial void OnUpdateEntity(<#= eventName #> @event, ref <#= entityName #><#= isAggregateTo ? "Entity" : string.Empty #> entity, ref bool autoMap);

		partial void OnEntityUpdated(<#= eventName #> @event, ref <#= entityName #><#= isAggregateTo ? "Entity" : string.Empty #> entity);

		partial void OnSaveEntity(<#= eventName #> @event, ref <#= entityName #><#= isAggregateTo ? "Entity" : string.Empty #> entity, ref bool continueWithRepositorySave, ref bool createDontUpdate);

		partial void OnEntitySaved(<#= eventName #> @event, ref <#= entityName #><#= isAggregateTo ? "Entity" : string.Empty #> entity);

		partial void OnHandled(<#= eventName #> @event);

		#endregion
<#
}
#>
	}
}
<#+
	protected override bool AppliesToElement()
	{
		var result = ShouldGenerateCodeForElement(this.Element) && this.Element.AppliedStereotypes.Any(property => property.Name == "Entity");
		if (!result)
			return false;
		IEnumerable<IAssociation> relationships = this.Element.GetRelatedLinks<IAssociation>().Where(associationEnd => associationEnd.TargetElement == this.Element);
		return relationships.Any();
	}
#>
